
Name: Zhengyuan Zhu
Last 4 digits ID: 8274

CSE 6331, Cloud Computing					


Quiz Q2, 3.30, Summer 2020   (c) DL, UTA, 2020


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please send the link, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here: Z.Z
     _________________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4a. Using the cloud services provider, all functionality possible should be implemented on that provider.
     (Of course, displaying web pages through a browser and the user interface is "local")

 4b. Upload all data files (*jpg and *csv, not this quiz) to cloud service. 
  
Show and submit code, when each part is complete, raise your hand and then show us:

 To recieve credit you MUST show (demo) AND submit the code (text only) on Canvas.

  5. Show a web page and interface (which resides on the cloud provider) with your 
    Student ID at the top and below that, your name, at the top of every web page dispayed 
    (for this quiz). 
    Below that please show the picture "s.jpg".
    Please use a large font.
    
    The cloud service provider is either IBM Cloud (BlueMix) or Microsoft Azure.

    On that same page, please show the total number of earthquakes ("quakes") in the data set, 
    and give (location and id) the largest one ("mag").  

    @app.route('/search_largest_n', methods=['GET'])
    def largest_n(number=5):
        number = 1
        count = 19757
        # connect to DB2
        db2conn = ibm_db.connect(db2cred['ssldsn'], "","")
        if db2conn:
            sql = "SELECT * FROM EARTHQUAKE ORDER BY MAG DESC FETCH FIRST ? ROWS ONLY;"
            stmt = ibm_db.prepare(db2conn, sql)
            ibm_db.bind_param(stmt, 1, number)
            ibm_db.execute(stmt)
            
            rows=[]
            result = ibm_db.fetch_assoc(stmt)
            while result != False:
                rows.append(result.copy())
                result = ibm_db.fetch_assoc(stmt)
            
            ibm_db.close(db2conn)
        return render_template('large_n.html', ci=rows, c=count)

  6. (web page) a user to give two magnitude values and the number of partitions (called N),
     show the number of quakes between those values in N partitions 
     (Example: for the two magnitude values 2.0 and 5.0, and N=3, show for 2.0 to 2.9999, 3.0 to 3.9999, 4.0 to 4.9999)
     show the number of quakes in EACH partition, and the time and location of the largest quake in that (each) partition.

     @app.route('/search_scale', methods=['GET'])
def search_scale():
    low_bound = request.args.get('low_bound', 2, type=int)
    high_bound = request.args.get('high_bound', 5, type=int)
    partition = request.args.get('partition', 3, type=int)
    tmp = low_bound
    delta = (high_bound-low_bound)/partition
    slots = []
    ans = {}
    ans_max = {}
    while tmp<high_bound:
        slots.append([tmp, tmp+delta])
        tmp += delta
    for slot in slots:
        ans[(slot[0], slot[1])] = 0
        ans_max[(slot[0], slot[1])] = 0

    # connect to DB2
    db2conn = ibm_db.connect(db2cred['ssldsn'], "","")
    if db2conn:
        sql = "SELECT * FROM QUAKES"
        stmt = ibm_db.exec_immediate(db2conn, sql)
        # fetch the result
        result = ibm_db.fetch_assoc(stmt)
        while result != False:
            curr_mag = float(result['MAG'])
            if low_bound<curr_mag<high_bound:
                for slot in slots:
                    if slot[0]<curr_mag<slot[1]:
                        ans[(slot[0], slot[1])] += 1
                        if ans_max[(slot[0], slot[1])]==0:
                            ans_max[(slot[0], slot[1])] = result.copy()
                        elif curr_mag>float(ans_max[(slot[0], slot[1])]['MAG']):
                            ans_max[(slot[0], slot[1])] = result.copy()

            result = ibm_db.fetch_assoc(stmt)
        # close database connection
        ibm_db.close(db2conn)
    return render_template('search_scale.html', ci1=ans, ci2=ans_max)


  7. (Web page), allow a user to give two location values (lat and long for two different locations) 
     and on the page show (list) the id, lat, long, time, and place (name), for every earthquake in that area (box).

     @app.route('/search_around_place', methods=['GET'])
      def search_around_place():
          X1 = float(request.args.get('X1'))
          Y1 = float(request.args.get('Y1'))
          X2 = float(request.args.get('X2'))
          Y2 = float(request.args.get('Y2'))
          

          db2conn = ibm_db.connect(db2cred['ssldsn'], "","")
          if db2conn:
              sql = "SELECT * FROM EARTHQUAKE"
              stmt = ibm_db.exec_immediate(db2conn, sql)
              rows=[]
              result = ibm_db.fetch_assoc(stmt)
              while result != False:
                  curr_x = float(result['LATITUDE'])
                  curr_y = float(result['LONGTITUDE'])
                  
                  if X1<curr_x<X2 or X2<curr_x<X1:
                      if Y1<curr_y<Y2 or Y2<curr_y<Y1:
                          rows.append(result.copy())
                  result = ibm_db.fetch_assoc(stmt)
              
              ibm_db.close(db2conn)
          return render_template('search_around_place.html', ci=rows)

  8. (Web page), allow a user to give location name (for example "Tonopah") and show the most recent quakes (up to 4, 
     maximum, if more than 1). Then allow a user to modify the location (change name) or delete (remove) that quake.

 9. Show us, in a link, the application running and we will try it out. Only for parts 5, 6, 7, 8
    zzy824.us-south.cf.appdomain.cloud

 10. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.
